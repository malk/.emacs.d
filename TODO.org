* DONE spell conf, switching dictionaries between he languages I speak
* DONE FlySpell
* DONE Swap M-SPC and SPC
  M-SPC with a negative argument turn all whitespace around point into
  a single space, SPC just adds a space.
  `<DEL>'
`<Backspace>'
     Delete the previous character, or the text in the region if it is
     active (`delete-backward-char').

`<Delete>'
     Delete the next character, or the text in the region if it is
     active (`delete-forward-char').

`C-d'
     Delete the next character (`delete-char').

`M-\'
     Delete spaces and tabs around point (`delete-horizontal-space').

`M-<SPC>'
     Delete spaces and tabs around point, leaving one space
     (`just-one-space').

`C-x C-o'
     Delete blank lines around the current line (`delete-blank-lines').

`M-^'
     Join two lines by deleting the intervening newline, along with any
     indentation following it (`delete-indentation').
* DONE paredit
* DONE can I make emacs ignore the mouse completely for focus?
* DONE hl-line-mode globally
* DONE make C-x 1 toggle widnows positioning
  if there are several windows it should delete all others while
  saving to register
  if there is only one it shoudl restore register
* DONE Imenu
* DONE midnight.el
* DONE expand-region minor mode
* DONE multicursor minor mode
* DONE quick "mark line" command?
* DONE create a file of keybiddings i should do more
* DONE read the manual, iconrporate suggestions
* DONE maybe iedit? StudDlyCaps
* DONE windows move key bindings
* DONE projectile, eproject?
* DONE Centralize tags files
** DONE Make emacs tags work
* DONE make C-tab bury buffer on org mode too
* DONE add C-M-l to the C-l cycle beginning with C-M-l
* DONE w3m
* DONE flat modeline or powerline
* DONE gtags incorporation
** DONE AC support to gtags
** DONE projectile support
* DONE ac-yasnippet
** DONE yasnippet
* DONE fallback to dabbrev
* DONE diminish mode
* DONE make a zap-up-to-char, bind it to C-z
* DONE automatic autocompletion on every key hit on prog modes
** DONE Autocomplete
* DONE symbol next and previous
* DONE eldoc!
* DONE writegood mode
* DONE mark to char
* DONE lacarte
* DONE helm
* DONE jump to matching paren
* DONE easy insertion of true quotes
* DONE create an equivalent of eclipse's M-up and M-down in a
** DONE Moves a region
** DONE before developing a good one, initially jsut install the melpa one
* DONE quickurl and quicurl-add-url and quickurl-list
* DONE C-S-DEL should do the same thing as C-S-<backspace> right now (erase the current line and not move)
* DONE C-S-<backspace> should also go back one line
* DONE FlyCheck
* DONE Clojure
** DONE the emacs mode for idiomatic clojure: kibit
** DONE change colors on clojure test mode so the green and red bars are easier on the eye
** DONE streamline clojure-mode compile-comile_the_test-run_tests_jump_to_first_error collection fo keyboard shortcuts into a single keyboard shortcut
** DONE must make nrepl-jump use a different key-binding and leave M-. alone
** DONE tags not working?
* DONE bitlbee back
* DONE EasyPG
* DONE Complete ERC setup
* DONE global org keybindings
* DONE copyright update on save hook , does it respect license?
* DONE RSS client
* DONE More unicode
** DONE install sys unicode fonts
*** https://github.com/rolandwalker/unicode-fonts
*** http://ubuntuforums.org/showthread.php?t=16858
*** http://www.osx-e.com/downloads/misc/macfonts.html
** DONE usageUnicode tools
** DONE unicode-fonts
** DONE unicode whitespace
** DONE unicode-progressbar
** DONE pretty-mode-plus https://github.com/grettke/pretty-mode-plus/blob/master/pretty-mode-plus.el
*** DONE pretty mode lacks function smbol, pull-request into it?
* DONE Auototyping manual
* TODO make my conf install my packages automatically
* TODO a kind of writeroom mode (margins, subduing/hiding modeline etc)
   [2013-02-04 Mon]
   [[file:~/.emacs.d/init.el::"Insert%20a%20single%20space%20deleting%20all%20white-space%20around."][file:~/.emacs.d/init.el::"Insert a single space deleting all white-space around."]]
* TODO create an emacs function to create a defn for thingatpt
  [2013-01-31 Thu]
  [[file:~/dev/social-data-mining/test/social_data_mining/core_test.clj::(fact%20(skware%202)%20%3D>%205)][file:~/dev/social-data-mining/test/social_data_mining/core_test.clj::(fact (skware 2) => 5)]]
* TODO add nrepl-kill and nrepl-restart functions
  [2013-01-31 Thu]
* TODO midje lazytest should be compatible with lazy mode
* TODO org mode meta-up and down on subthings correctly stops instead of getting out of your parent, but just beeps an error : it should cycle inside parent
  [2013-02-03 Sun]
  [[file:~/Documents/clients/romeu/improvement/stop-being-a-wreck.org::*]]
* TODO I should contribute my changes done on emacs.d
  [2013-02-04 Mon]
  [[file:~/.emacs.d/init.el::"Captures%20but%20bypass%20dialogues."][file:~/.emacs.d/init.el::"Captures but bypass dialogues."]]
* TODO I need to iterate/recur my call to function on emacs.d instead of repeating them a lot
  [2013-02-04 Mon]
  [[file:~/.emacs.d/init.el::%3B%3B%20Your%20init%20file%20should%20contain%20only%20one%20such%20instance.][file:~/.emacs.d/init.el::;; Your init file should contain only one such instance.]]
* TODO ERT the Emacs testing framework
* TODO create a (at-dot-emacs-d PATH) function
  [2013-02-04 Mon]
  [[file:~/.emacs.d/init.el::(interactive)]]
* TODO create a macro for interactive (no reason for me to do a defun that is not)
  [2013-02-04 Mon]
  [[file:~/.emacs.d/init.el::(save-excursion]]
* TODO create a macro for save excursion (and narrowing)
  [2013-02-04 Mon]
  [[file:~/.emacs.d/init.el::(save-excursion]]
* TODO create a macro for saving registers
  [2013-02-04 Mon]
  [[file:~/.emacs.d/init.el::(save-excursion]]
* TODO Invert movement command on org, when I change hierarchy levels I want to default to a whole subtree moving and not just the parent
  [2013-02-04 Mon]
  [[file:~/Documents/clients/SODA-DGFIP/journal/2013-02-04.org::*]]
* TODO emacs chrome-as-app launcher
  [2013-02-04 Mon]
  [[file:~/Documents/clients/SODA-DGFIP/contacts/contacts.org]]
* TODO TDD as you mean it for Clojure
   [2013-02-05 Tue]
   [[file:~/Documents/clients/SODA-DGFIP/TODO.org::*Verifier%20qu'on%20peut%20les%20updater%20apr%C3%A8s%20zipper%20et%20dezipper%20en%20surchargeant][Verifier qu'on peut les updater aprÃ¨s zipper et dezipper en surchargeant]]
** TODO Code the test
** TODO code the answer to the test inside the test
** TODO now you should have a name for the code created
** TODO extract it as a function in the same file
** TODO extract is a function on the source file for this test file
** TODO if the source file for this test file does not exist we should create it
** TODO maybe we should even cal lein on it
** TODO extract the test itself to another test file if it does not belong here
* TODO ERT + clojure?
* TODO ERT + elisp?
* TODO Ecukes?
* TODO erase some of the one char yasnippet expansions, maybe all
* TODO subdue done entries on org mode
  [2013-02-05 Tue]
  [[file:~/.emacs.d/init.el::(add-hook%20'clojure-mode-hook%20'esk-pretty-fn)][file:~/.emacs.d/init.el::(add-hook 'clojure-mode-hook 'esk-pretty-fn)]]
* TODO we need WAAAAY more pcomplete
  [2013-02-07 Thu]
* TODO hungry fucking delete
  [2013-02-07 Thu]
  [[file:~/dev/clojure-katas/fizzbuzz/README.md::GPL]]
* TODO sometimes defn is not fontlocking for some reason
  Maybe the problem will jsut go away with purty mode so lets implement that one first
  [2013-02-07 Thu]
  [[file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(defn%20w)][file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(defn w)]]
* TODO C-RET insert new fact inside current facts, use snippet, go back after
  [2013-02-07 Thu]
  [[file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(fizzbuzz%2015)%20%3D>%20fizz_buzz)][file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(fizzbuzz 15) => fizz_buzz)]]
  
* TODO windmove should bounce on limit instead of beeping an error
* TODO Discover the good stuff to add
** TODO Process the init files from the great ones
*** TODO Magnar's
*** TODO https://github.com/rejeep/emacs/blob/master/rejeep-defuns.el#L150, 013-L158
*** TODO sacha chua's literate http://dl.dropbox.com/u/3968124/sacha-emacs.html
*** TODO https://github.com/jsulak/.emacs.d/blob/master/init.el
*** TODO https://github.com/gar3thjon3s/dotfiles/blob/master/.emacs.d/init.el
*** TODO https://github.com/ronert/.emacs.d
*** TODO Prelude
*** TODO Emacs starter kit
*** TODO purcell's conf files
*** TODO process reguardtoo's conf files
*** TODO howard lewis ship?
*** TODO GitHubs's most favorited
**** TODO dotfiles projects
***** TODO https://github.com/garybernhardt/dotfiles
***** TODO https://github.com/rmm5t/dotfiles
***** TODO https://github.com/technomancy/dotfiles
***** TODO https://github.com/cofi/dotfiles
***** TODO https://github.com/briancarper/dotfiles
***** TODO https://github.com/sugyan/dotfiles
***** TODO https://github.com/dakrone/dakrone-dotfiles
***** TODO https://github.com/jbarnette/dotfiles
***** TODO https://github.com/ryanbriones/dotfiles
***** TODO https://github.com/senny/dotfiles
**** TODO emacs.d projects
***** TODO https://github.com/purcell/emacs.d
***** TODO https://github.com/cjohansen/.emacs.d
***** TODO https://github.com/clear-code/emacs.d
***** TODO https://github.com/josh/emacs.d
***** TODO https://github.com/mbriggs/.emacs.d
***** TODO https://github.com/tavisrudd/emacs.d
***** TODO https://github.com/lancepantz/.emacs.d
***** TODO https://github.com/carllerche/.emacs.d
***** TODO https://github.com/bodil/emacs.d
***** TODO https://github.com/zpinter/emacs.d
*** TODO what clojure bigwigs use emacs and publis their conf?
** TODO am I missing a package from emacs-goodies-el? if so install by the official packaging sys
*** http://packages.debian.org/wheezy/emacs-goodies-el
** TODO see the docs of built-in modules
** TODO take a deep look on the remaining goods on package.el
* TODO Reorganize the configuration file itself
** TODO move all conf out of customization block
** TODO move all defuns to a central place
** TODO split conf in multiple files
   ERC conf goes to ~/.emacs.d/.ercrc.el and auth data to ~/.emacs.d/.erc-auth
** TODO Maybe using org Babel like sacha chua
* TODO Create my own yasnippet library replacing the awful elisp ones
* TODO git-gutter-fringe
* TODO fill electric-layout-rules, or electric layout wont work
* TODO Clojure
** TODO clojure/lisps RET inside a parentheis should inser a newline at point and push the closing paren down WHILE stacking down parens
   [2013-02-12 Tue]
   [[file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj]]
** TODO clojure create defn from fact call
   [2013-02-12 Tue]
   [[file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(fizzbuzz%200)%20%3D>%200)][file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(fizzbuzz 0) => 0)]]
*** TODO save excursion and narrow
*** TODO check if I am at the begginning of a fact
**** if not go to it
*** TODO comand is inside third sexp, go to it
*** TODO fetch the name and the arguments
*** TODO try a nrepl-jump
**** if it works we already have a definition
***** TODO fetch the existing definition's number of arguments for each multidispatch it has
****** if it is a new number
******* TODO Insert a new multidispatch
******** TODO see: expand-ags
******** TODO go to body acceot input see: rich-input
****** if they already exist 
******* place point inside that dispatch, accept input see: rich-input
******* 
*** TODO Jump to associated file (C-c C-t command)
*** TODO Yas expand
**** function name is the first thing on the copied sexp, use it
**** expand-args: Every arg used will be renamed with a name yas expand looping on args
**** jump to function description, expand
**** jump to body, accept rich-input
*** Execute test
**** fails? jump to error
**** suceeds? jump back to fact, resume expansion
*** Use magnar's "yas expand hook to restore state" trick

*** rich-input: input is limited during expandsion
**** maybe only by the surcharge of the tab key?
***** TODO if yes rearange bindings
***** TODO if no find a way to interrupt expansions, accept input then recover expansion where left (in recursive expansions)
      We will need this anyway as error recover but if I can streamline it
      away from normal worlflow all the better

*** TODO save last point inside code for each dispatch of each definition
*** TODO this is kind of a state machine?
** TODO clojure-test-mode midje plugin
   [2013-02-12 Tue]
   [[file:~/Documents/clients/SODA-DGFIP/TODO.org::*JBossTools][JBossTools]]
*** refactor upstream to be plugin based, create a default plugin for clojure.test, push it
** TODO make a flycheck plugin for clojure
*** TODO With linters in daemon mode
*** TODO With test checkers running
* TODO Add a way to launch a browser window as app from emacs (webjump?)
  [2013-02-12 Tue]
* TODO purty-mode on emacs instead of pretty-mode-plus (easier to customize)
   [2013-02-11 Mon]
** TODO Add all transformations that pretty-mode-plus and pretty-mode have that purty-mode does not as configurations
*** TODO propose them somewhere (pull requests?)
** TODO make another conf overlay that just transforms all common lisp calls from all lisps into useful pretty unicode
** TODO faire un add de font locking pour org-mode avec des symboles pour TODO et DONE
   [2013-02-04 Mon]
   [[file:~/.emacs.d/init.el::(defun%20toggle-maximize-buffer%20()][file:~/.emacs.d/init.el::(defun toggle-maximize-buffer ()]]
*** TODO turn org mode TODO into â
    [2013-02-05 Tue]
    [[file:~/.emacs.d/init.el::%3B%3B%3B%20Perl][file:~/.emacs.d/init.el::;;; Perl]]
*** TODO turn org mode DONE into â
* TODO How do I licence things in GPL+BSD+MIT+APache like firefox does?
  [2013-02-11 Mon]
* TODO yasnippets can call any arbitrary emacs lisp function adn fetch its result: including yas-expand recursively
 [2013-02-11 Mon]
** TODO use that shit to create a whole workflow of absolute lazyness in autotyping
** I can also call the first expand inside an elisp function, which i can keybind
* TODO make a midje plugin for clojure-test-mode and ditch midje-mode itself
  [2013-02-11 Mon]
  [[file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(fizzbuzz%200)%20%3D>%200)][file:~/dev/clojure-katas/fizzbuzz/test/fizzbuzz/core_test.clj::(fizzbuzz 0) => 0)]]
* TODO Complete dash.el
   [2013-02-11 Mon]
*** TODO Combinators
*** TODO Reginals library
*** TODO sugar.js
*** TODO underscore.js
* TODO mu4e and offlineImap connecte to my gmail
** TODO bbdb for contacts
*** TODO those bbdb contacts bridged to erc
** Even if I do not use mu4e on a day to day basis, I want a gmail fallback, might as well use that
*** TODO backup those files on whose cloud outside of gmail?
**** TODO A whole lot of email cleanup before all that
* TODO config rainbow mode faces so they subdue under zenburn while maintaining constrat between themselves
  is this possible at all? this means finding 9 faces (8 if we use the default face in the list) that are differerent enough between them while subduing with the background. Maybe a "shades of gray" aproach?
* TODO a browser inside emacs
** Elisp only
** using webkit for rendering
** using v8 for javascript
** look at pahtnom.js code
** major mode over pages
** the js console is the mode itself
*** repl?
** Everything doable with other Emacs modes should
*** can I fetch things from
**** w3I
**** w3m
**** the js repl mode thingy
**** wget.el
**** URL
**** sass mode
**** etc
*** Elnode can help?
*** headless testing first
**** dev second
***** browsing third
* Things waiting some outside event that I cannot control
** predictive mode (seems awesome, currently too alpha)
** add ampc support
*** Google play music support (currently broken, without this ampc is useless for me)
** elein (leiningen from emacs, must wait ti to migrate from swank to nrepl)
*** technomancy is working on an elisp port of leiningen!
** C-c C-n does not work on clojure mode, must fix
** eastwood seems awesome but it needs lein 2.0 and emacs compat
